---
title: "Working with Weather and Climate Data in R"
author: "Loïc Henry"
date: today
format: html
execute:
  echo: true
  warning: false
  message: false
---

# Introduction

Understanding and analyzing weather data is central to many applications in economics, environmental sciences, and policy evaluation.  
This document introduces the main **data sources** and demonstrates an **R-based workflow** to download, explore, and aggregate weather data (using ERA5 reanalysis as an example).

---

## Choosing Weather Data: data type and source

### Weather station data
- Provide **accurate** weather data for specific locations.  
- Have **missing observations**, since stations appear/disappear over time.  
- Possible to interpolate missing data (e.g., inverse distance weighting), but this can introduce measurement errors and bias.  
- Example: [NOAA Global Daily Weather Station Data](https://www.ncei.noaa.gov/metadata/geoportal/rest/metadata/item/gov.noaa.ncdc:C00861/html)

### Gridded weather datasets
- Provide a **uniform** weather record across space and time.  
- Constructed from station data + statistical interpolation and/or **reanalysis models**.  
- Several freely available sources:  
  - [PRISM](https://prism.oregonstate.edu/) — US, daily, high resolution (4km).  
  - [ERA5](https://cds.climate.copernicus.eu/datasets/reanalysis-era5-single-levels?tab=overview) — global, hourly, ~25km resolution.  
  - [CRU](https://crudata.uea.ac.uk/cru/data/hrg/) — global, monthly, ~56km resolution.  

---

## Setup: Importing ERA5 Data

To work with ERA5 data:

1. Register at ECMWF: <https://www.ecmwf.int/>  
2. Get your API keys: <https://cds.climate.copernicus.eu/how-to-api>  
3. Save your key securely — **never share it**. 
  -> Save it in a R Script in your project, named `ERA5_APIKey.R`, and add this file to your `.gitignore` if you use Git.
4. Go to [ERA5 Daily Statistics](https://cds.climate.copernicus.eu/datasets/derived-era5-single-levels-daily-statistics?tab=download), accept the terms, and copy the API request.  
5. Use the [`ecmwfr`](https://bluegreen-labs.github.io/ecmwfr/) package in R to make requests.  

---

# Workflow in R

We now illustrate a complete workflow for downloading, importing, exploring, and aggregating ERA5 weather data in R.

## Preamble of your scripts

First, set up all your working directories, load useful packages and then add your API key.

```{r setup}
#===============================================================================
# Preamble: setup the folders and load packages ------
#===============================================================================

# Clean memory 
rm(list=ls())
gc()

# Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  tidyverse, terra, maps, here, ncdf4, raster, climate, devtools, 
  sf, sp, rnaturalearth, Matrix, ecmwfr
)

# Setup project directories
dir <- list()
dir$root <- here()
dir$source <- here(dir$root, "source")   # raw data
dir$data <- here(dir$root, "data")       # processed data
dir$code <- here(dir$root, "code")       # scripts
dir$figures <- here(dir$root, "figures") # plots
dir$tables <- here(dir$root, "tables")   # tables

# Create missing directories
lapply(dir, function(i) dir.create(i, recursive = TRUE, showWarnings = FALSE))

# Register your API key once
# Execute the script where you have stored identification key
source(here(dir$code, "ERA5_APIKey.R"))
# And then set key
wf_set_key(key = key_loic)

```

## Downloading one batch of data
Let's import the temperature data for your month of birth in Europe.

```{r download}
request <- list(
  dataset_short_name = "reanalysis-era5-land-monthly-means",
  product_type = "monthly_averaged_reanalysis",
  variable = "2m_temperature",
  year = "1993",
  month = "07",
  time = "00:00",
  data_format = "netcdf",
  download_format = "unarchived",
  area = c(72, -31, 27, 60),
  target = "TMPFILE"
)


# Download (takes ~1 min for one month of Europe data)
file <- ecmwfr::wf_request(
  request  = request,
  transfer = TRUE,
  path     = here(dir$source)
)

```


## Import the data
```{r import-data}
# Open with ncdf4
nc_temp <- ncdf4::nc_open(file)

# With terra
terra_temp <- terra::rast(file)

# With raster
raster_brick <- raster::brick(file)
raster_brick
```

## Explore the data

```{r explore-data}
nc_temp
terra_temp
raster_brick

# Plot one day
plot(raster_brick[[1]], main = "ERA-5 Reanalysis Demo (Temperature)")

# Extract precipitation values
temp <- ncdf4::ncvar_get(nc_temp, "t2m")
dim(temp) # 3D array: lon x lat 
```

## Aggregate spatially (example: EU Nuts3)

We often need to aggregate gridded climate data to match the geographic and temporal scale of socio-economic outcomes (e.g., departments, counties, municipalities).

### Load your geographic boundaries shape file

```{r aggregate-spatially}

# Find and load nuts-3 geographic boundaries
nuts3_sf
# nuts3_sp <- as(nuts3_sf, "Spatial")

# Quick check: CRS consistency
raster::crs(raster_brick)
sf::st_crs(nuts3_sf)

```


### Construct the aggregation matrix

We now construct a projection matrix $P$ such that:

$$ A = P \times G $$

where:
- $G$ is the matrix of gridded climate data (cells × time),
- $A$ is the aggregated matrix (Nuts-3 × time).

```{r projection-matrix}

# Identify in which nuts3 region falls each cell
id <- raster_brick
info <- raster::extract(x = id, y = nuts3_sp, cellnumbers=TRUE)

# Build transformation matrix with weights
dinfo <- do.call("rbind", lapply(names(info), function(i) {
  df <- as.data.frame(info[[i]])
  df$w <- df$gpw_v4_population_count_adjusted_to_2015_unwpp_country_totals_rev11_2020_2pt5_min *
          df$weight / sum(df$gpw_v4_population_count_adjusted_to_2015_unwpp_country_totals_rev11_2020_2pt5_min *
                          df$weight, na.rm = TRUE)
  df$dept.order <- match(i,names(info))
  df
}))

# Sparse projection matrix
g <- stack(raster_brick[[1]], raster_brick[[2]], raster_brick[[3]])
G <- g[]  

P_weight <- Matrix::sparseMatrix(
  i = dinfo$cell,
  j = dinfo$dept.order,
  x = dinfo$w,
  dims = c(ncell(g), length(unique(dinfo$dept.order)))
)

# Aggregated data
A_weight <- t(P_weight) %*% G
nuts3_temp <- data.frame(as.matrix(A_weight))
nuts3_temp$ame <- row.names(nuts3_temp)
```

## Visualize aggregated results

```{r maps}

nuts3_temp_sf <- nuts3_temp %>%
  left_join(dept_sf, by = "name") %>% 
  st_as_sf()

ggplot(nuts3_temp_sf) +
  geom_sf(aes(fill = X0), color = "black", alpha = 0.75) +
  scale_fill_viridis_c() +
  labs(title = "Department-level Precipitation (ERA5, for your month of birth)")

```



